---
language: python
python:
#  - 2.7
#  - 3.3
#  - 3.4
#  - 3.5
  - 3.6
services:
  - docker
cache:
  bundler:
  directories:
    - $HOME/.cache/pip
env:
  global:
    - secure: MD73NCVzctbVmi2QnQtwtH/ISXN2K0alsLbixoaXl7gr3XvTB4sYB0u+KKtPV46jbeAlQqTRObPfQouPrsLsiNDYcpuN0I5bKsn3TTs4ZHIkD0I2Q9Wh3qNM2fYf9mw3ZUhvXVTEod0W7jzkVGb6kitRCJj8rioKKzvE/YdVsG4=
    - ANSIBLE_VERSION=2.7.2
  matrix:    
  - distro: centos7
    distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    playbook: test.yml
    JMETER_VERSION: 3.0
  - distro: centos6
    distribution: centos
    version: 6
    init: /sbin/init
    run_opts: "--privileged"
    playbook: test.yml
    JMETER_VERSION: 3.0
#  - distro: ubuntu1604
#    distribution: ubuntu
#    version: 16.04
#    init: /lib/systemd/systemd
#    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
#    playbook: test.yml
#    JMETER_VERSION: 3.0
  - distro: ubuntu1404
    distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: "--privileged"
    playbook: test.yml
    JMETER_VERSION: 3.0
#  - distro: ubuntu1604
#    distribution: ubuntu
#    version: 16.04
#    init: /sbin/init
#    run_opts: "--privileged"
#    playbook: test.yml
#    JMETER_VERSION: 3.0
#  - distro: debian8
#    distribution: debian
#    version: 8
#    init: /lib/systemd/systemd
#    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
#    playbook: test.yml
#    JMETER_VERSION: 3.0
sudo: required
dist: trusty
branches:
  only:
  - master
virtualenv:
  system_site_packages: false
before_install:
  - sudo apt-get update -qq
  - sudo apt-get install curl
  - sudo apt-get install -qq python-apt python-pycurl
  - sudo pip install --upgrade pip
  # Pull container.
  - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'
  #- 'sudo docker pull geerlingguy/docker-${distro}-ansible:latest'
install:
  # Install Ansible.
  - if [ "$ANSIBLE_VERSION" = "latest" ]; then pip install ansible; else pip install ansible==$ANSIBLE_VERSION; fi
  - if [ "$ANSIBLE_VERSION" = "latest" ]; then pip install ansible-lint; fi

  # Add ansible.cfg to pick up roles path.
  - "{ echo '[defaults]'; echo 'roles_path = ../'; } >> ansible.cfg"

  - pip install molecule

script:
  # Check ansible version
  - ansible --version

  # Prepare tests
  # Add user jenkins to the image
  - id -a
  - getent passwd 3000 || true # 3000 not found we can use it for jenkins user
#  - groupadd -g ${DOCKER_GID} docker && \
  - sudo adduser --quiet --disabled-password --shell /bin/bash --uid ${JENKINS_UID} --gid ${DOCKER_GID} --home ${JENKINS_HOME} --gecos "Jenkins" jenkins
  # Set password for the jenkins user (you may want to alter this).
#  - sudo echo "jenkins:jenkins1234" | sudo chpasswd
  
  - container_id=$(mktemp)
  # Run container in detached state.
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'
  #- 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} geerlingguy/docker-${distro}-ansible:latest "${init}" > "${container_id}"'

  # Ansible version.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible --version; git --version'

  # Ansible galaxy.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-galaxy search nabla --version'
  #- 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-galaxy setup --list'
  #- 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-galaxy install AlbanAndrieu.java'
  #- 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm git clone https://github.com/AlbanAndrieu/ansible-java.git /etc/ansible/roles/java'
  #- 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-galaxy install -r /etc/ansible/roles/role_under_test/tests/requirements.yml'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} -e "jmeter_version=$JMETER_VERSION"'

  # Test role idempotence.
  #- idempotence=$(mktemp)
  #- sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} -e "jmeter_version=$JMETER_VERSION" | tee -a ${idempotence}
  #- >
  #  tail ${idempotence}
  #  | grep -q 'changed=0.*failed=0'
  #  && (echo 'Idempotence test: pass' && exit 0)
  #  || (echo 'Idempotence test: fail' && exit 1)
  #
  ## Ensure jmeter is installed and at the right version.
  #- 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm which /usr/local/jmeter/apache-jmeter-$JMETER_VERSION/bin/jmeter'

#  #Below need java
#  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm /usr/local/jmeter/apache-jmeter-$JMETER_VERSION/bin/jmeter --version'
#  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm /usr/local/jmeter/apache-jmeter-$JMETER_VERSION/bin/jmeter --version | grep -qF "$JMETER_VERSION"'

  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
  email:
    recipients:
      - alban.andrieu@nabla.mobi
    on_success: [always|never|change]         # default: change
    on_failure: [always|never|change]         # default: always
